// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum BudgetItemType {
  EXPENSE
  INCOME
}

enum BudgetElementFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUALY
  ONETIME
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String
  username  String     @unique
  password  String
  accounts  Account[]
  providers Provider[]
  Budget    Budget[]
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Account {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  accountNumber String   @unique
  entity        String
  ownerId       String   @db.ObjectId
  owner         User     @relation(fields: [ownerId], references: [id])
  balance       Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("accounts")
}

model Provider {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  nit       String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("providers")
}

model Budget {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  ownerId     String   @db.ObjectId
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  starDate    DateTime
  endDate     DateTime
  incomes     Income
  expenses    Expense

  @@map("budgets")
}

type Income {
  name       BudgetItemType   @default(INCOME)
  categories BudgetCategory[]
}

type Expense {
  name       BudgetItemType   @default(EXPENSE)
  categories BudgetCategory[]
}

type BudgetCategory {
  name        String
  description String
  items       BudgetElement[]
}

type BudgetElement {
  name        String
  description String
  buckets     BudgetElementBucket[]
  frequency   BudgetElementFrequency @default(MONTHLY)
}

type BudgetElementBucket {
  estimatedAmount Float
  currentAmount   Float
  estimatedDate   DateTime
  currentDate     DateTime
}
